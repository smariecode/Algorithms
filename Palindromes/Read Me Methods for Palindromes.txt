Check for Palindromes

Return true if the given string is a palindrome. Otherwise, return false.
A palindrome is a word or sentence that's spelled the same way both forward and backward, ignoring punctuation, case, and spacing.
Input will include:

palindrome("eye") should return a boolean.
palindrome("eye") should return true.
palindrome("_eye") should return true.
palindrome("race car") should return true.
palindrome("not a palindrome") should return false.
palindrome("A man, a plan, a canal. Panama") should return true.
palindrome("never odd or even") should return true.
palindrome("nope") should return false.
palindrome("almostomla") should return false.
palindrome("My age is 0, 0 si ega ym.") should return true.
palindrome("1 eye for of 1 eye.") should return false.
palindrome("0_0 (: /-\ :) 0-0") should return true.
palindrome("five|\_/|four") should return false.

I was thinking that I was going to approach this using an array of some sorts, but then I noticed that the assignment hints
suggested that I study String.prototype.replace() and String.prototype.toLowerCase()

Here is my solution, after learning a bit of RegEx.


function palindrome(str) {
  
var lowerCaseString = str.replace(/[^\w\s]|_/g, "")   // removes all except alphanumeric characters and whitespace
           .replace(/ /g, "").toLowerCase(); // then removes white spaces 
  
var strippedString = lowerCaseString.split('').reverse().join(''); // reverses string for comparison


  if(strippedString === lowerCaseString) {
    return true;
  }
  else {
    return false;
  }
}

Thoughts - Would there ever be a situation in which you could not use RegExpressions? If so, why noy? And also, how could this be
resolved without using them? After some research, I found some cases to use RegEx and some to NOT.

When to use RegEx:
1. When a wildcard search isn't powerful enough
2. For finding words near neighboring words or punctuation.
3. Use it when you can, if you need flexibility and easier maintainability 
4. When looking for complex strings

Do not use RegEx:
1. HTML/XML parsing should not be done with regular expressions.
2. When you know that other devs are going to have to read your code over and over and over again
3. If performance is an issue

Note to self - write this without RegEx 
