
/* Write a function that splits an array (first argument) into groups the length of size (second argument) and returns them as a two-dimensional array.
Remember to use Read-Search-Ask if you get stuck. Write your own code.
Here are some helpful links:
Array.prototype.push()
Array.prototype.slice() */

After I finished this problem, I looked up other solutions. For once, I believe that my solution is
the BEST solution, everything else I found out there was a procedural mess. Question to self, will 
there ever be any reason to write this procedurally? 

  // iterate through array using size as slice determiner
  // i needs to increment by size so that the slice positioning is correct
  // n needs to start at zero, then increment += by size for the slice starting point
  // then push results to the chunk array

function chunkArrayInGroups(arr, size) {

  var chunk = [];

  for(var i = size, n = 0; n < arr.length; i += size, n += size){
    chunk.push(arr.slice(n, i));
  }
  return chunk;
}

/* Given data:
chunkArrayInGroups(["a", "b", "c", "d"], 2) should return [["a", "b"], ["c", "d"]].
chunkArrayInGroups([0, 1, 2, 3, 4, 5], 3) should return [[0, 1, 2], [3, 4, 5]].
chunkArrayInGroups([0, 1, 2, 3, 4, 5], 2) should return [[0, 1], [2, 3], [4, 5]].
chunkArrayInGroups([0, 1, 2, 3, 4, 5], 4) should return [[0, 1, 2, 3], [4, 5]].
chunkArrayInGroups([0, 1, 2, 3, 4, 5, 6], 3) should return [[0, 1, 2], [3, 4, 5], [6]].
chunkArrayInGroups([0, 1, 2, 3, 4, 5, 6, 7, 8], 4) should return [[0, 1, 2, 3], [4, 5, 6, 7], [8]].
chunkArrayInGroups([0, 1, 2, 3, 4, 5, 6, 7, 8], 2) should return [[0, 1], [2, 3], [4, 5], [6, 7], [8]]. */
