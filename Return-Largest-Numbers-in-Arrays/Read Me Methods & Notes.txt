Return an array consisting of the largest number from each provided sub-array. For simplicity, the provided array will contain exactly 4 sub-arrays.
Remember, you can iterate through an array with a simple for loop, and access each member with array syntax arr[i].
Remember to use Read-Search-Ask if you get stuck. Write your own code.
Here are some helpful links:
Comparison Operators

This took me a few hours off\on for 2 days. I finally got it to work today, with no help except my brain. 
The thing that finally helped me get it was to write out each iteration, it made me realize that the large
variable needed to be reset after every inner iteration. After finishing my solution, and then looking at 
other solutions, I found that this method is considered basic and 'procedural'. I see that I could have used
some math libraries to solve this, and will look at other solutions later, to learn more. 

For now, my procedural solution: 


function largestOfFour(arr) {
  
var large = 0;
var myArr = [];

  for(i = 0; i < arr.length; i++){ //iterate through outside array
    for(n = 0; n < arr.length; n++){ //iterate through inside array
      if(large <= arr[i][n]){ //compare variable 'large' to array elements
          large = arr[i][n]; // assign largest numer from comparision to variable 'large'
        if(n === 3){ // if end of inside array iteration, then push large value to myArr, then reset 'large' to 0 for next sub array
           myArr.push(large);
           large = 0;
        }
      }
      else { //if large is still largest, and if end of inside array iteration, push large value to myArr, reset large to 0
         if(n === 3){
           myArr.push(large);
           large = 0;
        }
      }
    }
  }
  
/* Here len/2 = 15
      For each iteration: large     i = ?     n = ?    if(large <= arr[i][n])?  if(n === 3)?   if(n === 3)?  i++    n++
      1st iteration:       [13]       0          0        13 <= 13 ? TRUE          n=0 FALSE        n=0 FALSE        1
      2nd iteration:       [13]       0          1        13 <= 27 ? TRUE          n=1 FALSE        n=0 FALSE        2
      3rd iteration:       [27]       0          2        27 <= 18 ? FALSE         n=2 FALSE        n=2 FALSE        3
      4th iteration:       [27]       0          3        27 <= 26 ? FALSE         n=3 FALSE        n=3 TRUE         4 (end loop)
      5th iteration:       [0]        1          0        0 <= 4 ? TRUE            n=0 FALSE        n=0 FALSE        1
      6th iteration:       [4]        1          1        4 <= 5 ? TRUE            n=1 FALSE        n=1 FALSE        2
      7th iteration:       and so on 

         
    End of the FOR Loop*/


    
return myArr;
  
   
} //ends function

largestOfFour([[13, 27, 18, 26], [4, 5, 1, 3], [32, 35, 37, 39], [1000, 1001, 857, 1]]); //given array
largestOfFour([[13, 27, 18, 26], [4, 5, 1, 3], [32, 35, 37, 39], [1000, 1001, 857, 1]]) //given array
